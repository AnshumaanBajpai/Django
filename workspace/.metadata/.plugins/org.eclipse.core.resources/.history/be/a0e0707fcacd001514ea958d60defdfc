from django.http import HttpResponseRedirect
# RequestContext and loader not needed if we use render
# from django.template import RequestContext, loader

from django.shortcuts import render, get_object_or_404
from polls.models import Question, Choice
from django.views import generic
from django.core.urlresolvers import reverse


# Creating the index view
class IndexView(generic.ListView):
    template_name = 'polls/index.html'
    contect_object_name = 'latest_question_list'
    
    def get_queryset(self):
        '''Returns the last five published questions'''
        return Question.objects.order_by('-pub_date')[:5]
    
# Creating a view for the details of the question
class DetailView(generic.DetailView):
    model = Question
    template_name = 'polls/detail.html'
    
# Creating a view for the results #most recent
class ResultsView(generic.DeleteView):
    model = Question
    template_name = 'polls/results.html'
    
# Creating a view for the vote
def vote(request, question_id): #most recent
    p = get_object_or_404(Question, pk=question_id)
    try:
        selected_choice = p.choice_set.get(pk=request.POST['choice'])
    except (KeyError, Choice.DoesNotExist):
        # Redisplay the question voting form.
        return render(request, 'polls/detail.html', {
                                                     'question':p,
                                                     'error_message': "You didn't select a choice",
                                                     })
    else:
        selected_choice.votes += 1
        selected_choice.save()
        
        return HttpResponseRedirect(reverse('polls:results', args=(p.id,)))
    
